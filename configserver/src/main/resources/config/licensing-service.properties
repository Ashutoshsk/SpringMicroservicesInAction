example.property= I AM THE DEFAULT

server.port=8081

spring.jpa.hibernate.ddl-auto=none
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
#docker run --name my-postgres -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres

spring.jpa.show-sql = true
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.database.driverClassName= org.postgresql.Driver
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=true

spring.cloud.loadbalancer.ribbon.enabled = false

eureka.instance.preferIpAddress = true
eureka.client.register-with-eureka = true
eureka.client.fetch-Registry = true
eureka.client.serviceUrl.defaultZone = http://localhost:8070/eureka/

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/spmia-realm
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

jwt.auth.converter.resource-id=ostock
jwt.auth.converter.principle-attribute=preferred_username

spring.security.oauth2.client.registration.ostock.client-id = ostock
spring.security.oauth2.client.registration.ostock.client-secret = rA7YMAATbmcqoMvrSyAVybvvFTzYSDZg
spring.security.oauth2.client.registration.ostock.provider = keycloak
spring.security.oauth2.client.registration.ostock.scope = openid
spring.security.oauth2.client.registration.ostock.authorization-grant-type = authorization_code
spring.security.oauth2.client.registration.ostock.redirect-uri = http://localhost:8080/login/oauth2/code/ostock
spring.security.oauth2.client.registration.ostock.client-name = OStock
spring.security.oauth2.client.provider.keycloak.issuer-uri = http://localhost:8080/realms/spmia-realm
spring.security.oauth2.client.provider.keycloak.user-name-attribute = preferred_username
spring.security.oauth2.client.provider.keycloak.realm = spmia-realm
spring.security.oauth2.client.provider.keycloak.auth-server-url = http://localhost:8080/realms/spmia-realm
spring.security.oauth2.client.provider.keycloak.ssl-required = external
spring.security.oauth2.client.provider.keycloak.use-resource-role-mappings = true
spring.security.oauth2.client.provider.keycloak.bearer-only = true

#spring.cloud.stream.bindings.inboundOrgChanges.destination= orgChangeTopic
#spring.cloud.stream.bindings.inboundOrgChanges.content-type= application/json
#spring.cloud.stream.bindings.inboundOrgChanges.group= licensingGroup
#spring.cloud.stream.kafka.binder.zkNodes= kafka
#spring.cloud.stream.kafka.binder.brokers=kafka

redis.server = redis
redis.port = 6379
