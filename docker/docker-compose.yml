version: '3.3'

services:

  # PostgresSQL Database Service
  database:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "ostock_dev"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak Service for Identity and Access Management
  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    restart: always
    volumes:
      - ./realm-export.json:/opt/jboss/keycloak/realm-export.json
    command:
      - "-Dkeycloak.import=/opt/jboss/keycloak/realm-export.json"
      - "-Dkeycloak.profile.feature.scripts=enabled"
      - "-Dkeycloak.profile.feature.upload_scripts=enabled"
      - "start-dev"
    networks:
      backend:
        aliases:
          - "keycloak"

  # Apache ZooKeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      backend:
        aliases:
          - "zookeeper"

  # Apache Kafka Server
  kafkaserver:
    image: confluentinc/cp-kafka:7.0.1
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"

  # Redis Service
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    hostname: redis
    networks:
      backend:
        aliases:
          - "redis"

  # Redis Insight for Redis Visualization
  redisInsight:
    image: redislabs/redisinsight
    container_name: redisinsight
    ports:
      - "8001:8001"
    links:
      - redis
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379

  # Zipkin Distributed Tracing Server
  zipkin:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"

  # Elasticsearch Service
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
      - es_certs:/usr/share/elasticsearch/config/certs
    ports:
      - "9300:9300"
      - "9200:9200"
    networks:
      backend:
        aliases:
          - "elasticsearch"

  # Logstash Service for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:7.15.0
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5000:5000"
    depends_on:
      - elasticsearch
    networks:
      backend:
        aliases:
          - "logstash"

  # Kibana Service for Elasticsearch Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      backend:
        aliases:
          - "kibana"

  # Eureka Server for Service Discovery
  eurekaserver:
    image: ashutoshsk/eurekaserver
    container_name: eurekaServer
    ports:
      - "8070:8070"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "eurekaserver"

  # API Gateway Server
  gatewayserver:
    image: ashutoshsk/api-gateway-server
    container_name: gateway
    ports:
      - "8072:8072"
    environment:
      PROFILE: "default"
      SERVER_PORT: "8072"
      CONFIGSERVER_URI: "http://configserver:8071"
      EUREKASERVER_URI: "http://eurekaserver:8070/eureka/"
      EUREKASERVER_PORT: "8070"
      CONFIGSERVER_PORT: "8071"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gateway"

  # Config Server for Centralized Configuration Management
  configserver:
    image: ashutoshsk/configserver
    container_name: configServer
    ports:
      - "8071:8071"
    networks:
      backend:
        aliases:
          - "configserver"

  # Licensing Service
  licensingservice:
    image: ashutoshsk/licensing-service
    container_name: licensing-service
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      DATABASESERVER_PORT: "5432"
      ENCRYPT_KEY: "IMSYMMETRIC"
      JAVA_TOOL_OPTIONS: "Djava.nio.charset=ALL-UNNAMED"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      kafkaserver:
        condition: service_started
    ports:
      - "8081:8081"
    networks:
      - backend

  # Organization Service
  organizationservice:
    image: ashutoshsk/organization-service
    container_name: organization-service
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      DATABASESERVER_PORT: "5432"
      ENCRYPT_KEY: "IMSYMMETRIC"
      JAVA_TOOL_OPTIONS: "Djava.nio.charset=ALL-UNNAMED"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      kafkaserver:
        condition: service_started
    ports:
      - "8082:8082"
    networks:
      - backend

volumes:
  esdata1:
    driver: local
  es_certs:
    driver: local

networks:
  backend:
    driver: bridge